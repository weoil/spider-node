export = rp;
declare function rp(options: any): any;
declare namespace rp {
  class Request {
    static debug: any;
    static defaultProxyHeaderExclusiveList: string[];
    static defaultProxyHeaderWhiteList: string[];
    constructor(options: any);
    abort(): void;
    addListener(type: any, listener: any): any;
    auth(user: any, pass: any, sendImmediately: any, bearer: any): any;
    aws(opts: any, now: any): any;
    cancel(...args: any[]): any;
    debug(...args: any[]): void;
    destroy(): void;
    emit(type: any, ...args: any[]): any;
    enableUnixSocket(): void;
    end(chunk: any): void;
    eventNames(): any;
    form(form: any): any;
    getHeader(name: any, headers: any): any;
    getMaxListeners(): any;
    getNewAgent(): any;
    hawk(opts: any): void;
    httpSignature(opts: any): any;
    init(requestOptions: any, ...args: any[]): any;
    jar(jar: any): any;
    json(val: any): any;
    listenerCount(type: any): any;
    listeners(type: any): any;
    multipart(multipart: any): any;
    oauth(_oauth: any): any;
    on(type: any, listener: any): any;
    onRequestError(error: any): void;
    onRequestResponse(response: any): void;
    once(type: any, listener: any): any;
    pause(...args: any[]): void;
    pipe(dest: any, opts: any): any;
    pipeDest(dest: any): void;
    prependListener(type: any, listener: any): any;
    prependOnceListener(type: any, listener: any): any;
    promise(): any;
    qs(q: any, clobber: any): any;
    readResponseBody(response: any): void;
    removeAllListeners(type: any, ...args: any[]): any;
    removeListener(type: any, listener: any): any;
    resume(...args: any[]): void;
    setMaxListeners(n: any): any;
    start(): void;
    then(...args: any[]): any;
    toJSON(): any;
    write(...args: any[]): any;
  }
  function bindCLS(): void;
  function cookie(str: any): any;
  const debug: any;
  function defaults(options: any, requester: any): any;
  function del(uri: any, options: any, callback: any): any;
  function forever(agentOptions: any, optionsArg: any): any;
  function get(uri: any, options: any, callback?: any): any;
  function head(uri: any, options: any, callback: any): any;
  function initParams(uri: any, options: any, callback: any): any;
  function jar(store: any): any;
  function options(uri: any, options: any, callback: any): any;
  function patch(uri: any, options: any, callback: any): any;
  function post(uri: any, options: any, callback: any): any;
  function put(uri: any, options: any, callback: any): any;
}
